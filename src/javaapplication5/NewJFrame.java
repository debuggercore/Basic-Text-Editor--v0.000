/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package javaapplication5;

//import DSJlabProject.TextEditorgui;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author SUJITHA
 */
public class NewJFrame extends javax.swing.JFrame {
 StringTokenizer word;
  DLL [] l= new DLL[100];
  int i=0;
  JFileChooser file;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jLabel1.setText(null);
        jTextArea1.setEnabled(false);
    }
    
    public void printText(){
        int j=0;
        int lineNo=1;
        String buffer=null;
          buffer=lineNo+". "+l[j].toString()+"\n";
          j++;
          lineNo++;
        while(j<i){
             buffer+=lineNo+". "+l[j].toString()+"\n";
             lineNo++;
             j++;
        }
         jTextArea1.setText(buffer);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        New = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Open = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        New.setBackground(new java.awt.Color(0, 102, 102));
        New.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });

        Save.setBackground(new java.awt.Color(204, 0, 51));
        Save.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Edit.setBackground(new java.awt.Color(0, 102, 51));
        Edit.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        Edit.setText("Edit");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        Exit.setBackground(new java.awt.Color(102, 0, 102));
        Exit.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 102)));
        jTextArea1.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane1.setViewportView(jTextArea1);

        Open.setBackground(new java.awt.Color(102, 102, 0));
        Open.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(New, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Open)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Exit, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Save)
                    .addComponent(Edit)
                    .addComponent(Exit)
                    .addComponent(New)
                    .addComponent(Open))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        // TODO add your handling code here:
        jTextArea1.setEnabled(true);
         jTextArea1.setText("");
        JOptionPane.showMessageDialog(null,"enter line by line");
        
        //KeyEvent e= new KeyEvent();
    }//GEN-LAST:event_NewActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        
        
        file=new JFileChooser();
      int choosevalue=  file.showSaveDialog(this);
      PrintWriter fout;
      if(choosevalue==JFileChooser.APPROVE_OPTION){
            try {
               fout =new PrintWriter(file.getSelectedFile());
               
                fout.println(jTextArea1.getText());
                  
                jLabel1.setText(file.getSelectedFile().getName());
                fout.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DLL.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_SaveActionPerformed
     
    Scanner in = null;
     try {
         in = new Scanner(file.getSelectedFile());
     } catch (FileNotFoundException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
    while(in.hasNextLine()){
    word=new StringTokenizer(in.nextLine()," ");
        l[i]=new DLL();
        while(word.hasMoreTokens()){
            
            //System.out.println(word.nextToken());
            
         l[i].insertWordL(word.nextToken());
          
       
        } i++;
    
    
    
    }
    printText();
/* Scanner fin = null;
     try {
         fin = new Scanner(file.getSelectedFile());
     } catch (FileNotFoundException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
     int lineNo=1;
        String buffer="";
        while(fin.hasNext()){
            buffer+=lineNo+". "+fin.nextLine()+"\n";
            lineNo++;
        }
        jTextArea1.setText(buffer);
        fin.close();*/
    }
       
    
    
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
         System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        // TODO add your handling code here:
        String k,input, input1;
        DLL g;
   //do{
        
    k = JOptionPane.showInputDialog("ENTER your choice whether word or line or exit ");     
        switch (k) {
            case "word":
                {
                    int line;
                    do{
                        
                    input=JOptionPane.showInputDialog("Enter line number to be edited");
                    line=Integer.parseInt(input);
                    
                   input = JOptionPane.showInputDialog("here's the list \n 1:insert word beginning\n 2: Insert at end\n 3: insert at any position\n4:replace at first\n 5:replace at end\n6:replace at any position\n7:Delete first\n8:Delete last\n9:Delete at any position ");     
                      int d;
                      d=Integer.parseInt(input);
                      
                     
                      switch(d){
                          case 1:
                              input=JOptionPane.showInputDialog("Enter word");
                              l[line-1].insertWordB(input);
                              printText();
                              break;
                            case 2:
                              input=JOptionPane.showInputDialog("Enter word");
                              l[line-1].insertWordL(input);
                              printText();
                              break; 
                                
                                case 3:
                                    
                                   
                                    input=JOptionPane.showInputDialog("Enter word ");
                              input1=JOptionPane.showInputDialog("Enter position");
                              l[line-1].insertWordAnyPos(input,Integer.parseInt(input1));
                              printText();
                              break;
                                    case 4:
                                   try { 
                                   
                                    input=JOptionPane.showInputDialog("Enter word ");
                              
                              l[line-1].replaceWordB(input);
                                   }
                                   catch(EmptyDoublyLinkedList e){}
                                   printText();
                              break;
                                       
                             case 5:
                                   try { 
                                   
                                    input=JOptionPane.showInputDialog("Enter word ");
                              
                              l[line-1].replaceWordL(input);
                                   }
                                   catch(EmptyDoublyLinkedList e){}
                                   printText();
                              break; 
                     
                                 case 6:
                                   try { 
                                   
                                    input=JOptionPane.showInputDialog("Enter word ");
                              input1=JOptionPane.showInputDialog("Enter pos");
                              
                              l[line-1].replaceWordatAnyPos(input, Integer.parseInt(input1));
                                   }
                                   catch(EmptyDoublyLinkedList e){}
                                   printText();
                              break;
                                case 7:
                                   try { 
                                   
                                    
                              
                              l[line-1].deleteWordB();
                                   }
                                   catch(EmptyDoublyLinkedList e){}
                                   printText();
                              break; 
                                    case 8:
                                   try { 
                                   
                                    
                              
                              l[line-1].deleteWordL();
                                   }
                                   catch(EmptyDoublyLinkedList e){}
                                   printText();
                              break; 
                                        case 9:
                                   try { 
                                   
                                    input1=JOptionPane.showInputDialog("Enter pos");
                              
                              l[line-1].deleteWordatAnyPos(Integer.parseInt(input1));
                                   }
                                   catch(EmptyDoublyLinkedList e){}
                                   printText();
                              break; 
                                        default:
                                            break;
                      }
                      
                       input=JOptionPane.showInputDialog("Continue: y or n");
                    }while(input.equals("y")||input.equals("Y"));
                    break;
                }
            case "line":
{
                 do{
                 input = JOptionPane.showInputDialog("here's the list for lines \n 1:insert line beginning\n 2: Insert at end\n 3: insert at any position\n4:replace at first\n 5:replace at end\n6:replace at any position\n7:Delete first\n8:Delete last\n9:Delete at any position ");     
                    int d;
                    d=Integer.parseInt(input);
                      
                    switch(d){
                        case 1: 
                            input=JOptionPane.showInputDialog("Enter line");
                          g=new DLL();
                            word=new StringTokenizer(input, " ");
                            while(word.hasMoreTokens()){
                                g.insertWordL(word.nextToken());
                            } 
                            l[i]=new DLL();
                            for(int j=i-1; j>=0; j--){
                               
                                l[j+1]=l[j];
                            }
                            i++;
                            l[0]=g;
                            printText();
                            break;
                            
                        case 2:
                            input=JOptionPane.showInputDialog("Enter line");
                          g=new DLL();
                            word=new StringTokenizer(input, " ");
                            while(word.hasMoreTokens()){
                                g.insertWordL(word.nextToken());
                            }
                            l[i]=new DLL();
                            l[i]=g;
                            i++;
                            printText();
                            break;
                        case 3:
                            input=JOptionPane.showInputDialog("Enter line");
                            input1=JOptionPane.showInputDialog("Enter position");
                          g=new DLL();
                            word=new StringTokenizer(input, " ");
                            while(word.hasMoreTokens()){
                                g.insertWordL(word.nextToken());
                            }
                            l[i]=new DLL();
                             for(int j=i-1; j>=Integer.parseInt(input1)-1; j--){
                                l[j+1]=l[j];
                            }
                             i++;
                            l[Integer.parseInt(input1)-1]=g;
                            printText();
                            break;
                        case 4:
                            input=JOptionPane.showInputDialog("Enter line");
                          g=new DLL();
                            word=new StringTokenizer(input, " ");
                            while(word.hasMoreTokens()){
                                g.insertWordL(word.nextToken());
                            }
                            l[0]=g;
                            printText();
                           break;
                            
                            case 5:
                            input=JOptionPane.showInputDialog("Enter line");
                          g=new DLL();
                            word=new StringTokenizer(input, " ");
                            while(word.hasMoreTokens()){
                                g.insertWordL(word.nextToken());
                            }
                            l[i-1]=g;
                            printText();
                           break;
                            case 6:
                            input1=JOptionPane.showInputDialog("Enter position");
                            input=JOptionPane.showInputDialog("Enter line");
                            
                          g=new DLL();
                            word=new StringTokenizer(input, " ");
                            while(word.hasMoreTokens()){
                                g.insertWordL(word.nextToken());
                            }
                            l[Integer.parseInt(input1)-1]=g;
                            printText();
                           break;
                                case 7:
                            for(int j =0; j<i-1 ; j++){
                            l[j]=l[j+1];
                            }
                            l[i-1]=null;
                            i--;
                            printText();
                          break;
                                    case 8:
                            
                            l[i-1]=null;
                            i--;
                            printText();
                          break;
                                    case 9:
                                        input1=JOptionPane.showInputDialog("enter the position");
                            for(int j =Integer.parseInt(input1)-1; j<i ; j++){
                            l[j]=l[j+1];
                            }
                            l[i]=null;
                            i--;
                            printText();
                          break;    
                                    default :
                                        break;
                            
                    }
                    input=JOptionPane.showInputDialog("Continue: y or n");
                    
                    
                
                }while(input.equals("y")||input.equals("Y"));
            
        }

    default:
                
                break;
        }

FileWriter fwriter = null;

     try {
         fwriter = new FileWriter(file.getSelectedFile(),false);
     } catch (IOException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
        try (PrintWriter outputfile1 = new PrintWriter(fwriter)) {
            for(int j=0;j<i; j++){
                Node p =l[j].header.next ;
               
                while(p!=l[j].trailer){
                    
                    outputfile1.print(p.getString()+" ");
                    p=p.getNext();
                }
                
                outputfile1.println();
                l[j].display();
                System.out.println();
            }
           
        }
        /*Scanner fin = null;
     try {
         fin = new Scanner(file.getSelectedFile());
     } catch (FileNotFoundException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
     int lineNo=1;
        String buffer="";
        while(fin.hasNext()){
            buffer+=lineNo+". "+fin.nextLine()+"\n";
            lineNo++;
        }
        jTextArea1.setText(buffer);
        fin.close();
        */
    }//GEN-LAST:event_EditActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // TODO add your handling code here:
        jTextArea1.setEnabled(true);
         jTextArea1.setText("");
         i=0;
         l=null;
        l=new DLL[100];
        file=new JFileChooser();
      int choosevalue=  file.showOpenDialog(this);
      PrintWriter fout;
      if(choosevalue==JFileChooser.APPROVE_OPTION){
          Scanner fin = null;
     try {
         fin = new Scanner(file.getSelectedFile());
          jLabel1.setText(file.getSelectedFile().getName());
     } catch (FileNotFoundException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
     /*int lineNo=1;
        String buffer="";
        while(fin.hasNext()){
             buffer+=lineNo+". "+fin.nextLine()+"\n";
            lineNo++;
            
        }
        jTextArea1.setText(buffer);
        fin.close();*/
      }

      Scanner in = null;
     try {
         in = new Scanner(file.getSelectedFile());
     } catch (FileNotFoundException ex) {
         Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
     }
    while(in.hasNextLine()){
    word=new StringTokenizer(in.nextLine()," ");
        l[i]=new DLL();
        while(word.hasMoreTokens()){
            
            //System.out.println(word.nextToken());
            
         l[i].insertWordL(word.nextToken());
          
       
        } i++;
    
    }//GEN-LAST:event_OpenActionPerformed
   printText();
    }
    
    class EmptyText extends Exception{
        public EmptyText(){
            JOptionPane.showMessageDialog(null, "Please enter text");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Edit;
    private javax.swing.JButton Exit;
    private javax.swing.JButton New;
    private javax.swing.JButton Open;
    private javax.swing.JButton Save;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
